
import argparse as ap

def damage_quant_parser():
    parser = ap.ArgumentParser(description='quantify theoretical damage from '
                               'electrode insertion')
    parser.add_argument('pre',help='path to 2-photon pre-data')
    parser.add_argument('post',help='path to 2-photon post-data')
    parser.add_argument('probe_length',help='length of probe used for '
                        'insertion (in microns)', type=int)
    parser.add_argument('probe_width',help='width of probe used for insertion '
                        '(in microns)', type=int)
    parser.add_argument('probe_depth', help='depth to which the probe was '
                        'inserted (in microns)', type=int)
    parser.add_argument('-s', '--sid_map', help='path to segment id mask '
                        'generated by swc2maskBRL', default=None)
    parser.add_argument('-p', '--pid_map', help='path to piece id mask '
                        'generated by swc2mask-pieceid', default=None)
    parser.add_argument('-b', '--b_map', help='path to binary mask '
                        'generated by swc2mask_cylinder_unit', default=None)
    parser.add_argument('-v', '--swc_path', help='path to swc generated by '
                        'tracing in vaa3d', default=None)
    parser.add_argument('-m', '--microns_per_pixel', help='multiplicative '
                        'factor by which pixel values can be transformed to '
                        'micron values (default 1)', default=1.0, type=float)
    parser.add_argument('-d', '--debug', help='print (potentially) helpful '
                        'debug info', action='store_true', default=False)
    parser.add_argument('-c', '--cache', help='turns off caching of probe '
                        'location in prestack (on by default)', 
                        action='store_false', default=True)
    parser.add_argument('-C', '--look_cache', help='turns off looking in cache'
                        ' location (on by default)', action='store_false', 
                        default=True)
    parser.add_argument('-a', '--aoe_buffers', help='buffers on probe size for'
                        ' looking at different areas of effect', nargs='+',
                        default=(0,), type=int)
    
    
    return parser

def mapper_parser():
    parser = ap.ArgumentParser(description='map theoretical damage for all '
                               'possible electrode insertions with specified'
                               'electrode size and number of rotations')
    parser.add_argument('data', help='sequence of swc, segid map, microns per '
                        'pixel value triplets -- in that order'
                        'with swc first and segid second', nargs='+')
    parser.add_argument('-r', '--rotations', help='number of rotations to use '
                        '(default 4)', type=int, default=4)
    parser.add_argument('-a', '--aoe_buffers', help='buffers on probe size for'
                        'looking at different areas of effect', nargs='+',
                        default=(0,), type=int)
    parser.add_argument('-p', '--probe_dims', help='triplets of depth, '
                        'length, width of probe size (default 600, 100, 10)',
                        nargs='+', default=(600, 100, 10), type=int)
    parser.add_argument('-o', '--output', help='file to save output in '
                        '(default "placeholder.pkl")', 
                        default='placeholder.pkl')
    return parser
    
